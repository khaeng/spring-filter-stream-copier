/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.itcall;

import org.springframework.boot.Banner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.system.ApplicationPid;
import org.springframework.context.ConfigurableApplicationContext;

import lombok.extern.slf4j.Slf4j;

@Slf4j
// @SpringBootApplication(exclude = { SecurityAutoConfiguration.class })
@SpringBootApplication
public class Application {

	public static final String PID = new ApplicationPid().toString();

	public static void main(String[] args) {

		log.info("PID: {}", Application.PID);

		System.setProperty("sun.stdout.encoding", "UTF-8"); // Charset.defaultCharset().name());

		/*** Log4j-2 for Jansi Support is skiped... ***/
		System.setProperty("log4j.skipJansi", "false");
		System.setProperty("spring.output.ansi.enabled", "ALWAYS");

		/*** Eclipse Error in Debug >>> throw new SilentExitException(); ***/
		System.setProperty("spring.devtools.restart.enabled", "false");

		// spring-boot의 log4j2 버전의 한계로 인해 GC를 최소화하여 성능을 올리기 위해서 아래 옵션을 줘야 합니다.
		System.setProperty("log4j2.enable.threadlocals", "true");
		System.setProperty("log4j2.enable.direct.encoders", "true");

//		SpringApplication.run(Application.class, args);
		SpringApplication laucherApp = new SpringApplicationBuilder(Application.class)
				// .web(WebApplicationType.NONE)
				.application();
//		laucherApp.addListeners(new SpringApplicationEventListener());
		laucherApp.addListeners(event -> {
			if (log.isInfoEnabled())
				log.info("SpringApplicationEvent[{}]:\n{}", event.getSource().getClass().getSimpleName(),
						event.getSource());
		});
		laucherApp.setBannerMode(Banner.Mode.OFF);
		laucherApp.setBannerMode(Banner.Mode.LOG);
		laucherApp.setBannerMode(Banner.Mode.CONSOLE); // - Default
		ConfigurableApplicationContext configurableApplicationContext = laucherApp.run(args);

		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
			// 종료 시 수행할 내용 기술.
			log.debug("Application[PID: {}] try to terminating...", Application.PID);
		}));

		log.info("ApplicationContext[{}]: {}", configurableApplicationContext.getClass().getSimpleName(),
				configurableApplicationContext);
		log.info("PID: {}", new ApplicationPid().toString());
	}

	public boolean someLibraryMethod() {
		return true;
	}

}
